# idea from waldo's hudspeed thing

"UnlitGeneric" {
	"$basetexture" "vgui/replay/thumbnails/digit"
	"$translucent" 1
	"$vertexcolor" 1
	"$no_fullbright" 1
	"$ignorez" 1

	"$0" 0 
	"$1" 1 
	"$10" 10
	"$tmp" 0

	// position vector
	"$org" "[0 0 0]" 
	"$pos" .0

	// conditions 
	"$is_negative" 0
	"$is_empty" 0
	"$is_last" 0
	"$conditions" 2 // conditions - 1 (is_neg + is_empty + is_last - 1)

	"$digit" 0
	"$empty" 10 // empty frame
	"$minus" 11 // minus frame

	// factors 
	"$factor" 1000000
	"$factor2" 100000 // factor / 10
	"$factor3" 10000 // factor2 / 10

	Proxies {
		// org: Get the player position vector ([123.53, -438.43, 99.993])
		PlayerPosition { scale 1 resultVar "$org" }

		// pos: Extract specific index from vector ([10, 20, 30] -> 10)
		Clamp { srcVar1 $0 min "$org[0]" max "$org[0]" resultVar $pos }

		// is_negative: Check if pos is negative (5.55 -> 0 | -5.55 -> 1)
		LessOrEqual {
			lessEqualVar $1
			greaterVar $0
			srcVar1 $pos
			srcVar2 $0
			resultVar $is_negative
		}

		// pos: Get the absolute value (-12.34 -> 12.34)
		Abs { srcVar1 $pos resultVar $pos }

		// digit: Get the digit at specific index
		// -- 
		// Example 1: factor <10> (first digit) >> 123[4].56
		// 1234.56 / 10 -> 123.456
		// frac 123.456 -> .456
		// .456 * 10 -> 4.56
		// int 4.56 -> 4
		// -- 
		// Example 2: factor <1000> (third digit) >> 1[2]34.56
		// 1234.56 / 1000 -> 1.23456
		// frac 1.23456 -> .23456
		// .23456 * 10 -> 2.3456
		// int 2.3456 -> 2
		// -- 
		Divide { srcVar1 $pos srcVar2 $factor resultVar $digit }
		Frac { srcVar1 $digit resultVar $digit }
		Multiply { srcVar1 $digit srcVar2 $10 resultVar $digit }
		
		// RESULT: NUMBER
		// Int { srcVar1 $digit resultVar $frame }

		// tmp: Get digit + the one before it aswell
		// -- 
		// 1234.56 / 1000 -> 1.23456
		// 1.23456 * 10 -> 12.3456
		// int 12.3456 -> 12
		// -- 
		Divide { srcVar1 $pos srcVar2 $factor2 resultVar $tmp }
		Int { srcVar1 $tmp resultVar $tmp }

		// digit: If digit is zero and there is no number infront if it, make it empty
		LessOrEqual {
			lessEqualVar $empty
			greaterVar $digit
			srcVar1 $tmp
			srcVar2 $0
			resultVar $digit
		}

		// RESULT: NUMBER, EMPTY
		// Int { srcVar1 $digit resultVar $frame }

		// is_empty: Check if digit is empty (0-9 -> 0 | 10 -> 1)
		Divide { srcVar1 $digit srcVar2 $10 resultVar $is_empty }
		Int { srcVar1 $is_empty resultVar $is_empty }

		
		// tmp: Get digit + before and after
		// -- 
		// 1234.56 / 1000 -> 1.23456
		// 1.23456 * 100 -> 123.456
		// int 123.456 -> 123
		// -- 
		Divide { srcVar1 $pos srcVar2 $factor3 resultVar $tmp }
		Int { srcVar1 $tmp resultVar $tmp }

		// is_last: Check if digit & number before+after are zero > then its the last number (0 | 1)
		LessOrEqual {
			lessEqualVar $0
			greaterVar $1
			srcVar1 $tmp
			srcVar2 $0
			resultVar $is_last
		}

		// tmp: Add all conditions together (is_negative + is_empty + is_last)
		Add { srcVar1 $is_negative srcVar2 $is_empty resultVar $tmp }
		Add { srcVar1 $tmp srcVar2 $is_last resultVar $tmp }

		// digit: If all conditions are true, set digit to minus
		LessOrEqual {
			lessEqualVar $digit
			greaterVar $minus
			srcVar1 $tmp
			srcVar2 $conditions
			resultVar $digit
		}

		// RESULT: NUMBER, EMPTY, MINUS
		Int { srcVar1 $digit resultVar $frame }
	}
}
